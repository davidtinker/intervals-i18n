name: Check Translation Tokens

on:
  pull_request:
    paths:
      - 'src/lang/*.json'
  push:
    paths:
      - 'src/lang/*.json'

jobs:
  check-tokens:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: src/lang/*.json
          files_ignore: src/lang/en.json

      - name: Setup Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create token comparison script
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          cat > compare-tokens.js << 'EOL'
          const fs = require('fs');
          
          function validateTokens(str) {
            const errors = [];
            let pos = 0;
          
            while (pos < str.length) {
              const openBrace = str.indexOf('{', pos);
              if (openBrace === -1) break;
          
              const closeBrace = str.indexOf('}', openBrace);
              if (closeBrace === -1) {
                errors.push(`Unclosed token starting at position ${openBrace}`);
                break;
              }
          
              const token = str.substring(openBrace, closeBrace + 1);
              if (token.length <= 2) {
                errors.push(`Empty token at position ${openBrace}`);
              }
          
              pos = closeBrace + 1;
            }
          
            return errors;
          }
          
          function countTokens(str) {
            const regex = /\{[^}]+\}/g;
            const matches = str.match(regex) || [];
            return matches.length;
          }
          
          function compareFiles(enFile, translationFile) {
            const en = JSON.parse(fs.readFileSync(enFile, 'utf8'));
            const translation = JSON.parse(fs.readFileSync(translationFile, 'utf8'));
          
            const errors = [];
          
            for (const [key, enValue] of Object.entries(en)) {
              if (typeof enValue !== 'string') continue;
          
              const transValue = translation[key];
              if (!transValue) {
                errors.push(`Missing translation for key: ${key}`);
                continue;
              }
          
              const enValidation = validateTokens(enValue);
              if (enValidation.length > 0) {
                errors.push(`Token format errors in English key "${key}": ${enValidation.join(', ')}`);
              }
          
              const transValidation = validateTokens(transValue);
              if (transValidation.length > 0) {
                errors.push(`Token format errors in translation key "${key}": ${transValidation.join(', ')}`);
              }
          
              const enTokenCount = countTokens(enValue);
              const transTokenCount = countTokens(transValue);
          
              if (enTokenCount !== transTokenCount) {
                errors.push(`Token count mismatch in key "${key}": English has ${enTokenCount} tokens, translation has ${transTokenCount} tokens`);
              }
            }
            return errors;
          }
          
          const [enFile, translationFile] = process.argv.slice(2);
          const errors = compareFiles(enFile, translationFile);
          
          if (errors.length > 0) {
            console.error(`Errors in ${translationFile}:`);
            console.error(errors.join('\n'));
            process.exit(1);
          } else {
            console.log(`${translationFile}: OK`);
          }
          EOL
            
      - name: Check translations
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            node compare-tokens.js src/lang/en.json "$file"
          done