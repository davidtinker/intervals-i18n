name: Check Translation Tokens

on:
  pull_request:
    paths:
      - 'src/lang/*.json'
  push:
    paths:
      - 'src/lang/*.json'

jobs:
  check-tokens:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: src/lang/*.json
          files_ignore: src/lang/en.json

      - name: Setup Node.js
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Create token comparison script
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          cat > compare-tokens.js << 'EOL'
          const fs = require('fs');
          
          function extractTokens(str) {
            const regex = /\{[^}]+\}/g;
            const matches = str.match(regex) || [];
            return [...new Set(matches)];  // Remove duplicates
          }
          
          function findDuplicateTokens(str) {
            const regex = /\{[^}]+\}/g;
            const matches = str.match(regex) || [];
            const seen = new Set();
            const duplicates = new Set();
          
            matches.forEach(token => {
              if (seen.has(token)) {
                duplicates.add(token);
              }
              seen.add(token);
            });
          
            return [...duplicates];
          }
          
          function compareFiles(enFile, translationFile) {
            const en = JSON.parse(fs.readFileSync(enFile, 'utf8'));
            const translation = JSON.parse(fs.readFileSync(translationFile, 'utf8'));
          
            const errors = [];
          
            for (const [key, enValue] of Object.entries(en)) {
              if (typeof enValue !== 'string') continue;
          
              const transValue = translation[key];
              if (!transValue) {
                errors.push(`Missing key: ${key}`);
                continue;
              }
          
              const duplicatesEn = findDuplicateTokens(enValue);
              const duplicatesTrans = findDuplicateTokens(transValue);
          
              if (duplicatesEn.length > 0) {
                errors.push(`Duplicate tokens in EN ${duplicatesEn.join(', ')} for key: ${key}`);
              }
          
              if (duplicatesTrans.length > 0) {
                errors.push(`Duplicate tokens in translation ${duplicatesTrans.join(', ')} for key: ${key}`);
              }
          
              const enTokens = extractTokens(enValue);
              const transTokens = extractTokens(transValue);
          
              for (const token of enTokens) {
                if (!transTokens.includes(token)) {
                  errors.push(`Missing token ${token} in key: ${key}`);
                }
              }
          
              for (const token of transTokens) {
                if (!enTokens.includes(token)) {
                  errors.push(`Extra token ${token} in key: ${key}`);
                }
              }
            }
            return errors;
          }
          
          const [enFile, translationFile] = process.argv.slice(2);
          const errors = compareFiles(enFile, translationFile);
          
          if (errors.length > 0) {
            console.error(`Errors in ${translationFile}:`);
            console.error(errors.join('\n'));
            process.exit(1);
          } else {
            console.log(`${translationFile}: OK`);
          }
          EOL

      - name: Check translations
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            node compare-tokens.js src/lang/en.json "$file"
          done